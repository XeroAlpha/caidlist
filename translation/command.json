{
    // Help text
    "ability.get": "查询玩家拥有的能力。",
    "ability.set": "设置玩家拥有的能力。",
    "aimassist.clear": "禁用玩家的辅助瞄准。",
    "aimassist.set": "启用玩家的辅助瞄准，并使用指定的预设。",
    "camera.attachToEntity": "绑定玩家摄像机到指定实体。",
    "camera.clear": "重置玩家的摄像机。",
    "camera.detachFromEntity": "解绑玩家摄像机。",
    "camera.fade.default": "使玩家视角逐渐变为黑色，维持一段时间后逐渐恢复。",
    "camera.fade.color": "使玩家视角逐渐变为指定的颜色，维持一段时间后逐渐恢复。",
    "camera.fade.time": "使玩家视角在指定的时间内逐渐变为黑色，维持指定时间后逐渐恢复。",
    "camera.fade.time.color": "使玩家视角按在指定的时间内逐渐变为指定的颜色，维持指定时间后逐渐恢复。",
    "camera.fov.clear": "重置玩家摄像机的视场角。",
    "camera.fov.set": "设置玩家摄像机的视场角。",
    "camera.set.*": "将玩家的摄像机%s指定预设。",
    "camera.set.*.override": "将玩家的摄像机%s指定预设，并覆盖该预设的%s。",
    "camera.set.*.override.facing": "将玩家的摄像机%s指定预设，并覆盖该预设的%s，使其面向%s。",
    "camera.set.*.set.ease": "平滑变换为",
    "camera.set.*.set.default": "设置为",
    "camera.set.*.facing.entity": "指定实体",
    "camera.set.*.facing.position": "指定坐标",
    "camera.set.*.override.entityOffset": "局部坐标偏移",
    "camera.set.*.override.pos": "位置",
    "camera.set.*.override.pos.rot": "位置与旋转角度",
    "camera.set.*.override.rot": "旋转角度",
    "camera.set.*.override.rot.entityOffset": "旋转角度与局部坐标偏移",
    "camera.set.*.override.rot.viewOffset": "旋转角度与视点偏移",
    "camera.set.*.override.rot.viewOffset.entityOffset": "旋转角度、视点偏移与局部坐标偏移",
    "camera.set.*.override.viewOffset": "视点偏移",
    "camera.set.*.override.viewOffset.entityOffset": "视点偏移与局部坐标偏移",
    "camera.set.default": "{{camera.set.*|camera.set.*.set.default}}", // 将玩家的摄像机设置为指定预设。
    "camera.set.ease.default": "{{camera.set.*|camera.set.*.set.ease}}", // 将玩家的摄像机平滑变换为指定预设。
    "camera.set.ease.entityOffset": "{{camera.set.*.override|camera.set.*.set.ease|camera.set.*.override.entityOffset}}", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的局部坐标偏移。
    "camera.set.ease.facing.entity": "{{camera.set.*.override.facing|camera.set.*.set.ease|camera.set.*.override.rot|camera.set.*.facing.entity}}", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的旋转角度，使其面向指定实体。
    "camera.set.ease.facing.position": "{{camera.set.*.override.facing|camera.set.*.set.ease|camera.set.*.override.rot|camera.set.*.facing.position}}", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的旋转角度，使其面向指定坐标。
    "camera.set.ease.pos": "{{camera.set.*.override|camera.set.*.set.ease|camera.set.*.override.pos}}", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的位置。
    "camera.set.ease.pos.facing.entity": "{{camera.set.*.override.facing|camera.set.*.set.ease|camera.set.*.override.pos.rot|camera.set.*.facing.entity}}", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的位置与旋转角度，使其面向指定实体。
    "camera.set.ease.pos.facing.position": "{{camera.set.*.override.facing|camera.set.*.set.ease|camera.set.*.override.pos.rot|camera.set.*.facing.position}}", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的位置与旋转角度，使其面向指定坐标。
    "camera.set.ease.pos.rot": "{{camera.set.*.override|camera.set.*.set.ease|camera.set.*.override.pos.rot}}", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的位置与旋转角度。
    "camera.set.ease.rot": "{{camera.set.*.override|camera.set.*.set.ease|camera.set.*.override.rot}}", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的旋转角度。
    "camera.set.ease.rot.entityOffset": "{{camera.set.*.override|camera.set.*.set.ease|camera.set.*.override.rot.entityOffset}}", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的旋转角度与局部坐标偏移。
    "camera.set.ease.rot.viewOffset": "{{camera.set.*.override|camera.set.*.set.ease|camera.set.*.override.rot.viewOffset}}", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的旋转角度与视点偏移。
    "camera.set.ease.rot.viewOffset.entityOffset": "{{camera.set.*.override|camera.set.*.set.ease|camera.set.*.override.rot.viewOffset.entityOffset}}", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的旋转角度、视点偏移与局部坐标偏移。
    "camera.set.ease.viewOffset": "{{camera.set.*.override|camera.set.*.set.ease|camera.set.*.override.viewOffset}}", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的视点偏移。
    "camera.set.ease.viewOffset.entityOffset": "{{camera.set.*.override|camera.set.*.set.ease|camera.set.*.override.viewOffset.entityOffset}}", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的视点偏移与局部坐标偏移。
    "camera.set.entityOffset": "{{camera.set.*.override|camera.set.*.set.default|camera.set.*.override.entityOffset}}", // 将玩家的摄像机设置为指定预设，并覆盖该预设的局部坐标偏移。
    "camera.set.facing.entity": "{{camera.set.*.override.facing|camera.set.*.set.default|camera.set.*.override.rot|camera.set.*.facing.entity}}", // 将玩家的摄像机设置为指定预设，并覆盖该预设的旋转角度，使其面向指定实体。
    "camera.set.facing.position": "{{camera.set.*.override.facing|camera.set.*.set.default|camera.set.*.override.rot|camera.set.*.facing.position}}", // 将玩家的摄像机设置为指定预设，并覆盖该预设的旋转角度，使其面向指定坐标。
    "camera.set.pos": "{{camera.set.*.override|camera.set.*.set.default|camera.set.*.override.pos}}", // 将玩家的摄像机设置为指定预设，并覆盖该预设的位置。
    "camera.set.pos.facing.entity": "{{camera.set.*.override.facing|camera.set.*.set.default|camera.set.*.override.pos.rot|camera.set.*.facing.entity}}", // 将玩家的摄像机设置为指定预设，并覆盖该预设的位置与旋转角度，使其面向指定实体。
    "camera.set.pos.facing.position": "{{camera.set.*.override.facing|camera.set.*.set.default|camera.set.*.override.pos.rot|camera.set.*.facing.position}}", // 将玩家的摄像机设置为指定预设，并覆盖该预设的位置与旋转角度，使其面向指定坐标。
    "camera.set.pos.rot": "{{camera.set.*.override|camera.set.*.set.default|camera.set.*.override.pos.rot}}", // 将玩家的摄像机设置为指定预设，并覆盖该预设的位置与旋转角度。
    "camera.set.rot": "{{camera.set.*.override|camera.set.*.set.default|camera.set.*.override.rot}}", // 将玩家的摄像机设置为指定预设，并覆盖该预设的旋转角度。
    "camera.set.rot.entityOffset": "{{camera.set.*.override|camera.set.*.set.default|camera.set.*.override.rot.entityOffset}}", // 将玩家的摄像机设置为指定预设，并覆盖该预设的旋转角度与局部坐标偏移。
    "camera.set.rot.viewOffset": "{{camera.set.*.override|camera.set.*.set.default|camera.set.*.override.rot.viewOffset}}", // 将玩家的摄像机设置为指定预设，并覆盖该预设的旋转角度与视点偏移。
    "camera.set.rot.viewOffset.entityOffset": "{{camera.set.*.override|camera.set.*.set.default|camera.set.*.override.rot.viewOffset.entityOffset}}", // 将玩家的摄像机设置为指定预设，并覆盖该预设的旋转角度、视点偏移与局部坐标偏移。
    "camera.set.viewOffset": "{{camera.set.*.override|camera.set.*.set.default|camera.set.*.override.viewOffset}}", // 将玩家的摄像机设置为指定预设，并覆盖该预设的视点偏移。
    "camera.set.viewOffset.entityOffset": "{{camera.set.*.override|camera.set.*.set.default|camera.set.*.override.viewOffset.entityOffset}}", // 将玩家的摄像机设置为指定预设，并覆盖该预设的视点偏移与局部坐标偏移。
    "camera.removeTarget": "清除玩家摄像机的跟踪目标。",
    "camera.targetEntity.default": "设置玩家摄像机的跟踪目标为指定实体。",
    "camera.targetEntity.withOffset": "设置玩家摄像机的跟踪目标为指定实体偏移后的位置。",
    "camerashake.add": "为玩家应用镜头摇晃效果。",
    "camerashake.stop": "为玩家移除镜头摇晃效果。",
    "clear.default": "清除玩家物品栏中的物品。",
    "clearspawnpoint.default": "重置玩家重生点。",
    "clone.default": "在区域间复制方块。",
    "clone.filtered.withBlockState": "在区域间复制方块。",
    "clone.filtered.withDataValue": "在区域间复制方块。",
    "controlscheme.clear": "恢复玩家的操纵方案。",
    "controlscheme.set": "设置玩家的操纵方案。",
    "damage.default": "对实体造成伤害。",
    "damage.withDamager": "对实体造成来源于特定实体的伤害。",
    "daylock.default": "切换昼夜更替锁定。",
    "deop.default": "撤销管理员身份。",
    "dialogue.change": "更改与NPC的对话场景。",
    "dialogue.open": "打开与NPC的对话场景。",
    "difficulty.withEnum": "更改游戏难度。",
    "difficulty.withInt": "更改游戏难度。",
    "effect.add.finite": "为实体添加持续一定时间的状态效果。",
    "effect.add.infinite": "为实体添加持续时间无限的状态效果。",
    "effect.clear": "清除实体的状态效果。",
    "enchant.withEnum": "对实体手持的物品进行附魔。",
    "enchant.withInt": "对实体手持的物品进行附魔。",
    "event.entity": "为实体触发实体事件。",
    "execute.align": "将执行坐标的指定分量向下取整，并执行后续子命令。",
    "execute.anchored": "改变执行定位基准点，并执行后续子命令。",
    "execute.as": "改变执行者，并执行后续子命令。",
    "execute.at": "改变执行位置，并执行后续子命令。",
    "execute.conditional.block.withBlockState": "当指定坐标的方块满足条件时，执行后续子命令。",
    "execute.conditional.block.withDataValue": "当指定坐标的方块满足条件时，执行后续子命令。",
    "execute.conditional.block.default": "当指定坐标的方块满足条件时，执行后续子命令。",
    "execute.conditional.blocks": "当指定区域的方块满足条件时，执行后续子命令。",
    "execute.conditional.entity": "当实体满足条件时，执行后续子命令。",
    "execute.conditional.score.compare": "当记分项分数满足条件时，执行后续子命令。",
    "execute.conditional.score.matches": "当记分项分数满足条件时，执行后续子命令。",
    "execute.facing.default": "改变执行朝向为面向指定坐标，并执行后续子命令。",
    "execute.facing.entity": "改变执行朝向为面向指定实体，并执行后续子命令。",
    "execute.legacy.default": "改变执行位置与执行者，并执行后续命令。",
    "execute.legacy.detect": "改变执行位置与执行者，并仅当特定方块满足条件时执行命令。",
    "execute.in": "改变执行维度与执行坐标系，并执行后续子命令。",
    "execute.positioned.default": "改变执行坐标为指定坐标，并执行后续子命令。",
    "execute.positioned.as": "改变执行坐标为指定实体的位置，并执行后续子命令。",
    "execute.rotated.default": "改变执行朝向为指定朝向，并执行后续子命令。",
    "execute.rotated.as": "改变执行朝向为指定实体的朝向，并执行后续子命令。",
    "execute.run": "执行命令。",
    "fill.default.default": "用指定方块填充区域。",
    "fill.default.withBlockState": "用指定方块填充区域。",
    "fill.default.withDataValue": "用指定方块填充区域。",
    "fill.replace.default": "用指定方块替换区域中的特定方块。",
    "fill.replace.withBlockState": "用指定方块替换区域中的特定方块。",
    "fill.replace.withDataValue": "用指定方块替换区域中的特定方块。",
    "fog.delete": "从玩家的迷雾栈中移除迷雾。",
    "fog.push": "向玩家的迷雾栈中添加迷雾。",
    "function.default": "调用函数。",
    "gamemode.withEnum": "更改游戏模式。",
    "gamemode.withInt": "更改游戏模式。",
    "gamerule.boolGameRule": "查看或修改特定布尔类型游戏规则。",
    "gamerule.intGameRule": "查看或修改特定整型游戏规则。",
    "gamerule.viewAll": "查看所有游戏规则。",
    "gametips.default": "启用或禁用游戏提示。",
    "gametest.clearAll": "清除所有 GameTest 测试。",
    "gametest.create": "为 GameTest 测试分配区域。",
    "gametest.pos": "查询最近的 GameTest 测试的位置。",
    "gametest.run.default": "运行指定的 GameTest 测试。",
    "gametest.run.short": "运行指定的 GameTest 测试。",
    "gametest.runset": "运行指定的 GameTest 测试集合。",
    "gametest.runsetuntilfail": "运行指定的 GameTest 测试集合，若有一个测试未通过则立即停止。",
    "gametest.runthese": "运行附近所有的 GameTest 测试。",
    "gametest.runthis": "运行最近的 GameTest 测试。",
    "gametest.stopall": "停止全部 GameTest 测试。",
    "give.default": "给予玩家特定物品。",
    "help.withCommand": "按命令名列出命令用法。",
    "help.withPage": "按页数列出命令用法。",
    "hud.default": "配置选中玩家的HUD界面元素的可见性。",
    "immutableworld.default": "查询或设置世界是否不可更改。",
    "inputpermission.query": "查询选中玩家的会话的操作输入权限。",
    "inputpermission.set": "设置选中玩家的会话的操作输入权限。",
    "kick.default": "踢出特定玩家。",
    "kill.default": "击杀或移除实体。",
    "list.default": "列出在线玩家。",
    "locate.biome": "寻找并确定最近的特定生物群系的坐标。",
    "locate.structure": "寻找并确定最近的特定结构的坐标。",
    "loot.*.from.kill": "特定实体被击杀",
    "loot.*.from.loot": "通过特定战利品表",
    "loot.*.from.mine": "通过挖掘特定方块",
    "loot.give.from.*": "给予玩家%s所能获得的战利品。",
    "loot.give.from.kill": "{{loot.give.from.*|loot.*.from.kill}}", // 给予玩家特定实体被击杀所能获得的战利品。
    "loot.give.from.loot": "{{loot.give.from.*|loot.*.from.loot}}", // 给予玩家通过特定战利品表所能获得的战利品。
    "loot.give.from.mine": "{{loot.give.from.*|loot.*.from.loot}}", // 给予玩家通过特定战利品表所能获得的战利品。
    "loot.insert.from.*": "向指定容器方块中加入%s所能获得的战利品。",
    "loot.insert.from.kill": "{{loot.insert.from.*|loot.*.from.kill}}", // 向指定容器方块中加入特定实体被击杀所能获得的战利品。
    "loot.insert.from.loot": "{{loot.insert.from.*|loot.*.from.loot}}", // 向指定容器方块中加入通过特定战利品表所能获得的战利品。
    "loot.insert.from.mine": "{{loot.insert.from.*|loot.*.from.mine}}", // 向指定容器方块中加入通过挖掘特定方块所能获得的战利品。
    "loot.replace.block.default.from.*": "将指定方块的部分槽位替换为%s所能获得的战利品。",
    "loot.replace.block.default.from.kill": "{{loot.replace.block.default.from.*|loot.*.from.kill}}", // 将指定方块的部分槽位替换为特定实体被击杀所能获得的战利品。
    "loot.replace.block.default.from.loot": "{{loot.replace.block.default.from.*|loot.*.from.loot}}", // 将指定方块的部分槽位替换为通过特定战利品表所能获得的战利品。
    "loot.replace.block.default.from.mine": "{{loot.replace.block.default.from.*|loot.*.from.mine}}", // 将指定方块的部分槽位替换为通过挖掘特定方块所能获得的战利品。
    "loot.replace.block.withCount.from.*": "将指定方块的部分槽位替换为%s所能获得的战利品。",
    "loot.replace.block.withCount.from.kill": "{{loot.replace.block.withCount.from.*|loot.*.from.kill}}", // 将指定方块的部分槽位替换为特定实体被击杀所能获得的战利品。
    "loot.replace.block.withCount.from.loot": "{{loot.replace.block.withCount.from.*|loot.*.from.loot}}", // 将指定方块的部分槽位替换为通过特定战利品表所能获得的战利品。
    "loot.replace.block.withCount.from.mine": "{{loot.replace.block.withCount.from.*|loot.*.from.mine}}", // 将指定方块的部分槽位替换为通过挖掘特定方块所能获得的战利品。
    "loot.replace.entity.default.from.*": "将指定实体的部分槽位替换为%s所能获得的战利品。",
    "loot.replace.entity.default.from.kill": "{{loot.replace.entity.default.from.*|loot.*.from.kill}}", // 将指定实体的部分槽位替换为特定实体被击杀所能获得的战利品。
    "loot.replace.entity.default.from.loot": "{{loot.replace.entity.default.from.*|loot.*.from.loot}}", // 将指定实体的部分槽位替换为通过特定战利品表所能获得的战利品。
    "loot.replace.entity.default.from.mine": "{{loot.replace.entity.default.from.*|loot.*.from.mine}}", // 将指定实体的部分槽位替换为通过挖掘特定方块所能获得的战利品。
    "loot.replace.entity.withCount.from.*": "将指定实体的部分槽位替换为%s所能获得的战利品。",
    "loot.replace.entity.withCount.from.kill": "{{loot.replace.entity.withCount.from.*|loot.*.from.kill}}", // 将指定实体的部分槽位替换为特定实体被击杀所能获得的战利品。
    "loot.replace.entity.withCount.from.loot": "{{loot.replace.entity.withCount.from.*|loot.*.from.loot}}", // 将指定实体的部分槽位替换为通过特定战利品表所能获得的战利品。
    "loot.replace.entity.withCount.from.mine": "{{loot.replace.entity.withCount.from.*|loot.*.from.mine}}", // 将指定实体的部分槽位替换为通过挖掘特定方块所能获得的战利品。
    "loot.spawn.from.*": "在指定位置掉落%s所能获得的战利品。",
    "loot.spawn.from.kill": "{{loot.spawn.from.*|loot.*.from.kill}}", // 在指定位置掉落特定实体被击杀所能获得的战利品。
    "loot.spawn.from.loot": "{{loot.spawn.from.*|loot.*.from.loot}}", // 在指定位置掉落通过特定战利品表所能获得的战利品。
    "loot.spawn.from.mine": "{{loot.spawn.from.*|loot.*.from.mine}}", // 在指定位置掉落通过挖掘特定方块所能获得的战利品。
    "me.default": "发送一条关于自己的消息。",
    "mobevent.default": "查询或设置生物事件的启用状态。",
    "music.play": "播放指定的音乐。",
    "music.queue": "将指定音乐加入播放队列。",
    "music.stop": "播放指定的音乐。",
    "music.volume": "设置音乐播放的音量。",
    "op.default": "赋予特定玩家管理员身份。",
    "particle.default": "在指定位置生成粒子发射器。",
    "place.feature.default": "在指定的位置放置地物。",
    "place.featurerule.default": "在指定的位置放置地物规则。",
    "place.jigsaw.default": "以指定的设置放置并转换拼图方块。",
    "place.structure.default": "放置拼图结构并转换其中的拼图方块。",
    "playanimation.default": "在特定实体上播放实体动画。",
    "playsound.default": "在特定位置为指定玩家播放声音。",
    "recipe.give": "向玩家赋予指定的配方。",
    "recipe.take": "从玩家收回指定的配方。",
    "reload.default": "重新加载行为包中的函数与脚本。",
    "replaceitem.block.default": "替换指定方块容器中的物品。",
    "replaceitem.block.withOldItemHandling": "替换指定方块容器中的物品。",
    "replaceitem.entity.default": "替换指定实体特定槽位中的物品。",
    "replaceitem.entity.withOldItemHandling": "替换指定实体特定槽位中的物品。",
    "ride.evictRiders": "为坐骑取消骑乘关系。",
    "ride.startRiding": "在骑手与坐骑间建立骑乘关系。",
    "ride.stopRiding": "为骑手取消骑乘关系。",
    "ride.summonRide": "为骑手生成坐骑。",
    "ride.summonRider": "为坐骑生成骑手。",
    "say.default": "向所有玩家广播消息。",
    "schedule.clear.all": "从所有计划中移除指定的函数。",
    "schedule.delay.add": "计划在指定的时间间隔后执行指定的函数。",
    "schedule.delay.clear": "取消指定的函数在一定时间间隔后执行的计划。",
    "schedule.onAreaLoad.add.box": "指定一个矩形区域，计划在此区域被加载时执行指定的函数。",
    "schedule.onAreaLoad.add.circle": "指定一个圆形区域，计划在此区域被加载时执行指定的函数。",
    "schedule.onAreaLoad.add.tickingArea": "指定一个常加载区域，计划在此区域被加载时执行指定的函数。",
    "schedule.onAreaLoad.clear.function": "从所有区域加载时触发的计划中移除指定的函数。",
    "schedule.onAreaLoad.clear.tickingArea": "指定一个常加载区域，从计划中移除在此区域被加载时执行的所有或指定函数。",
    "scoreboard.objectives.add": "添加记分项。",
    "scoreboard.objectives.list": "列出记分项。",
    "scoreboard.objectives.remove": "移除记分项。",
    "scoreboard.objectives.setdisplay.belowName": "显示或隐藏记分项。",
    "scoreboard.objectives.setdisplay.default": "显示或隐藏记分项。",
    "scoreboard.players.list": "列出追踪的记分板对象。",
    "scoreboard.players.modify": "修改记分板对象的分数。",
    "scoreboard.players.operation": "对两个记分板对象的分数进行操作。",
    "scoreboard.players.random": "将记分板对象的分数修改为一个指定范围内的随机数。",
    "scoreboard.players.reset": "重置记分板对象的分数。",
    "scoreboard.players.test": "测试记分板对象的分数是否在指定范围。",
    "script.debugger.close": "关闭脚本调试器。",
    "script.debugger.connect": "以主动模式打开脚本调试器。",
    "script.debugger.listen": "以被动模式打开脚本调试器。",
    "script.diagnostics.capture.start": "启动脚本诊断数据抓取。",
    "script.diagnostics.capture.stop": "结束脚本诊断数据抓取。",
    "script.profiler.start": "启动脚本性能分析。",
    "script.profiler.stop": "停止脚本性能分析。",
    "script.watchdog.exportStats": "导出看门狗计时器统计数据。",
    "scriptevent.default": "向 Script API 模块广播消息事件。",
    "set_movement_authority.default": "设置服务器是否对玩家客户端的移动进行校验。",
    "setblock.default": "更改指定坐标位置的方块。",
    "setblock.withBlockState": "更改指定坐标位置的方块。",
    "setblock.withDataValue": "更改指定坐标位置的方块。",
    "setmaxplayers.default": "设置世界的最大可加入玩家数。",
    "setworldspawn.default": "设置世界重生点。",
    "spawnpoint.default": "设置玩家重生点。",
    "spreadplayers.default": "将指定实体传送到区域内的随机位置。",
    "stopsound.default": "为指定玩家停止播放声音。",
    "structure.delete": "从存储中删除指定的结构。",
    "structure.load.animated": "从存储中渐进加载指定的结构。",
    "structure.load.default": "从存储中加载指定的结构。",
    "structure.save.default": "将结构以指定名称存储。",
    "structure.save.short": "将结构以指定名称存储。",
    "summon.default": "生成指定的实体。",
    "summon.withNameTag": "生成指定的实体并为其命名。",
    "summon.facing.entity": "生成指定的实体并使其面向另一实体。",
    "summon.facing.position": "生成指定的实体并使其面向指定位置。",
    "tag.list": "列出实体拥有的标签。",
    "tag.modify": "修改实体拥有的标签。",
    "teleport.entity.toEntity": "将指定实体传送至另一实体所在位置。",
    "teleport.entity.toPos.default": "将指定实体传送到指定坐标。",
    "teleport.entity.toPos.facing.entity": "将指定实体传送到指定坐标，并面向另一实体。",
    "teleport.entity.toPos.facing.position": "将指定实体传送到指定坐标，并面向另一坐标。",
    "teleport.entity.toPos.withRotation": "将指定实体传送到指定坐标，并面向指定方向。",
    "teleport.self.toEntity": "将自身传送至指定实体所在位置。",
    "teleport.self.toPos.default": "将自身传送到指定坐标。",
    "teleport.self.toPos.facing.entity": "将自身传送到指定坐标，并面向指定实体。",
    "teleport.self.toPos.facing.position": "将自身传送到指定坐标，并面向另一坐标。",
    "teleport.self.toPos.withRotation": "将自身传送到指定坐标，并面向指定方向。",
    "tell.default": "向指定玩家发送私聊消息。",
    "tellraw.default": "向指定玩家发送JSON文本消息。",
    "testfor.default": "测试指定的实体是否存在。",
    "testforblock.withBlockState": "测试指定坐标的方块是否满足条件。",
    "testforblock.withDataValue": "测试指定坐标的方块是否满足条件。",
    "testforblocks.default": "测试指定区域的方块是否满足条件。",
    "tickingarea.add.box": "添加矩形常加载区域。",
    "tickingarea.add.circle": "添加圆形常加载区域。",
    "tickingarea.list": "列出常加载区域。",
    "tickingarea.preload.withName": "将指定常加载区域标记为预先加载。",
    "tickingarea.preload.withPosition": "将指定坐标所在的常加载区域标记为预先加载。",
    "tickingarea.remove.withName": "移除指定的常加载区域。",
    "tickingarea.remove.withPosition": "移除指定坐标所在的常加载区域。",
    "tickingarea.removeAll": "移除全部常加载区域。",
    "time.add": "将当前时间加快指定时间值。",
    "time.query": "查询当前时间。",
    "time.set.withEnum": "设置当前时间为指定时间点。",
    "time.set.withInt": "设置当前时间为指定时间点。",
    "title.clear": "清除指定玩家屏幕上显示的标题。",
    "title.reset": "重置指定玩家的标题时间设置。",
    "title.show": "向指定玩家展示指定标题。",
    "title.times": "设置指定玩家的标题时间设置。",
    "titleraw.clear": "清除指定玩家屏幕上显示的JSON文本标题。",
    "titleraw.reset": "重置指定玩家的JSON文本标题时间设置。",
    "titleraw.show": "向指定玩家展示指定JSON文本标题。",
    "titleraw.times": "设置指定玩家的JSON文本标题时间设置。",
    "toggledownfall.default": "切换当前天气是否降雨。",
    "volumearea.add": "添加矩形功能域。",
    "volumearea.list": "列出所有功能域。",
    "volumearea.remove.withName": "移除指定功能域。",
    "volumearea.remove.withPosition": "移除指定坐标所在的功能域。",
    "volumearea.removeAll": "移除所有功能域。",
    "weather.query": "查询当前天气。",
    "weather.update": "设置当前天气。",
    "worldbuilder.default": "切换世界建造者能力开关。",
    "wsserver.default": "连接WebSocket服务器。",
    "xp.withInt": "修改玩家的经验值。",
    "xp.withLevel": "修改玩家的经验值。",
    // Command Syntax
    "? <page: int>": "this: help.withPage", // 按页数列出命令用法。
    "? [command: CommandName]": "this: help.withCommand", // 按命令名列出命令用法。
    "alwaysday [lock: Boolean]": "this: daylock.default", // 切换昼夜更替锁定。
    "camerashake add <player: target> [intensity: float] [seconds: float] [shakeType: CameraShakeType]": "this: camerashake.add", // 为玩家应用镜头摇晃效果。
    "camerashake stop [player: target]": "this: camerashake.stop", // 为玩家移除镜头摇晃效果。
    "clear [player: target] [itemName: Item] [data: int] [maxCount: int]": "this: clear.default", // 清除玩家物品栏中的物品。
    "clearspawnpoint [player: target]": "this: clearspawnpoint.default", // 重置玩家重生点。
    "clone <begin: x y z> <end: x y z> <destination: x y z> [maskMode: MaskMode] [cloneMode: CloneMode]": "this: clone.default", // 在区域间复制方块。
    "clone <begin: x y z> <end: x y z> <destination: x y z> filtered <cloneMode: CloneMode> <tileName: Block> <blockStates: block states>": "this: clone.filtered.withBlockState", // 在区域间复制方块。
    "clone <begin: x y z> <end: x y z> <destination: x y z> filtered <cloneMode: CloneMode> <tileName: Block> <tileData: int>": "this: clone.filtered.withDataValue", // 在区域间复制方块。
    "connect <serverUri: text>": "this: wsserver.default", // 连接WebSocket服务器。
    "damage <target: target> <amount: int> <cause: DamageCause> entity <damager: target>": "this: damage.withDamager", // 对实体造成来源于特定实体的伤害。
    "damage <target: target> <amount: int> [cause: DamageCause]": "this: damage.default", // 对实体造成伤害。
    "daylock [lock: Boolean]": "this: daylock.default", // 切换昼夜更替锁定。
    "deop <player: target>": "this: deop.default", // 撤销管理员身份。
    "dialogue change <npc: target> <sceneName: string> [players: target]": "this: dialogue.change", // 更改与NPC的对话场景。
    "dialogue open <npc: target> <player: target> [sceneName: string]": "this: dialogue.open", // 打开与NPC的对话场景。
    "difficulty <difficulty: Difficulty>": "this: difficulty.withEnum", // 更改游戏难度。
    "difficulty <difficulty: int>": "this: difficulty.withInt", // 更改游戏难度。
    "effect <player: target> <effect: Effect> [seconds: int] [amplifier: int] [hideParticles: Boolean]": "this: effect.add.finite", // 为实体添加持续一定时间的状态效果。
    "effect <player: target> clear": "this: effect.clear", // 清除实体的状态效果。
    "enchant <player: target> <enchantmentId: int> [level: int]": "this: enchant.withInt", // 对实体手持的物品进行附魔。
    "enchant <player: target> <enchantmentName: Enchant> [level: int]": "this: enchant.withEnum", // 对实体手持的物品进行附魔。
    "event entity <target: target> <eventName: string>": "this: event.entity", // 为实体触发实体事件。
    "execute <origin: target> <position: x y z> <command: command>": "this: execute.legacy.default", // 改变执行位置与执行者，并执行后续命令。
    "execute <origin: target> <position: x y z> detect <detectPos: x y z> <block: Block> <data: int> <command: command>": "this: execute.legacy.detect", // 改变执行位置与执行者，并仅当特定方块满足条件时执行命令。
    "fill <from: x y z> <to: x y z> <tileName: Block> <blockStates: block states> replace [replaceTileName: Block] [replaceBlockStates: block states]": "this: fill.replace.withBlockState", // 用指定方块替换区域中的特定方块。
    "fill <from: x y z> <to: x y z> <tileName: Block> <tileData: int> replace [replaceTileName: Block] [replaceDataValue: int]": "this: fill.replace.withDataValue", // 用指定方块替换区域中的特定方块。
    "fill <from: x y z> <to: x y z> <tileName: Block> [blockStates: block states] [oldBlockHandling: FillMode]": "this: fill.default.withBlockState", // 用指定方块填充区域。
    "fill <from: x y z> <to: x y z> <tileName: Block> [tileData: int] [oldBlockHandling: FillMode]": "this: fill.default.withDataValue", // 用指定方块填充区域。
    "fog <victim: target> <mode: delete> <userProvidedId: string>": "this: fog.delete", // 从玩家的迷雾栈中移除迷雾。
    "fog <victim: target> push <fogId: string> <userProvidedId: string>": "this: fog.push", // 向玩家的迷雾栈中添加迷雾。
    "function <name: filepath>": "this: function.default", // 调用函数。
    "gamemode <gameMode: GameMode> [player: target]": "this: gamemode.withEnum", // 更改游戏模式。
    "gamemode <gameMode: int> [player: target]": "this: gamemode.withInt", // 更改游戏模式。
    "gamerule": "this: gamerule.viewAll", // 查看所有游戏规则。
    "gamerule <rule: BoolGameRule> [value: Boolean]": "this: gamerule.boolGameRule", // 查看或修改特定布尔类型游戏规则。
    "gamerule <rule: IntGameRule> [value: int]": "this: gamerule.intGameRule", // 查看或修改特定整型游戏规则。
    "gametips <status: Status>": "this: gametips.default", // 启用或禁用游戏提示。
    "give <player: target> <itemName: Item> [amount: int] [data: int] [components: json]": "this: give.default", // 给予玩家特定物品。
    "help <page: int>": "this: help.withPage", // 按页数列出命令用法。
    "help [command: CommandName]": "this: help.withCommand", // 按命令名列出命令用法。
    "kick <name: target> <reason: message>": "this: kick.default", // 踢出特定玩家。
    "kill [target: target]": "this: kill.default", // 击杀或移除实体。
    "list": "this: list.default", // 列出在线玩家。
    "locate <feature: Feature> [useNewChunksOnly: Boolean]": "this: locate.structure", // 寻找并确定最近的特定结构的坐标。
    "loot give <players: target> kill <entity: target> [<tool>|mainhand|offhand: string]": "this: loot.give.from.kill", // 给予玩家特定实体被击杀所能获得的战利品。
    "loot give <players: target> loot <loot_table: string> [<tool>|mainhand|offhand: string]": "this: loot.give.from.loot", // 给予玩家通过特定战利品表所能获得的战利品。
    "loot insert <position: x y z> kill <entity: target> [<tool>|mainhand|offhand: string]": "this: loot.insert.from.kill", // 向指定容器方块中加入特定实体被击杀所能获得的战利品。
    "loot insert <position: x y z> loot <loot_table: string> [<tool>|mainhand|offhand: string]": "this: loot.insert.from.loot", // 向指定容器方块中加入通过特定战利品表所能获得的战利品。
    "loot spawn <position: x y z> kill <entity: target> [<tool>|mainhand|offhand: string]": "this: loot.spawn.from.kill", // 在指定位置掉落特定实体被击杀所能获得的战利品。
    "loot spawn <position: x y z> loot <loot_table: string> [<tool>|mainhand|offhand: string]": "this: loot.spawn.from.loot", // 在指定位置掉落通过特定战利品表所能获得的战利品。
    "me <message: message>": "this: me.default", // 发送一条关于自己的消息。
    "mobevent <event: MobEvent> [value: Boolean]": "this: mobevent.default", // 查询或设置生物事件的启用状态。
    "msg <target: target> <message: message>": "this: tell.default", // 向指定玩家发送私聊消息。
    "music play <trackName: string> [volume: float] [fadeSeconds: float] [repeatMode: MusicRepeatMode]": "this: music.play", // 播放指定的音乐。
    "music queue <trackName: string> [volume: float] [fadeSeconds: float] [repeatMode: MusicRepeatMode]": "this: music.queue", // 将指定音乐加入播放队列。
    "music stop [fadeSeconds: float]": "this: music.stop", // 播放指定的音乐。
    "music volume <volume: float>": "this: music.volume", // 设置音乐播放的音量。
    "op <player: target>": "this: op.default", // 赋予特定玩家管理员身份。
    "particle <effect: string> [position: x y z]": "this: particle.default", // 在指定位置生成粒子发射器。
    "playanimation <entity: target> <animation: string> [next_state: string] [blend_out_time: float] [stop_expression: string] [controller: string]": "this: playanimation.default", // 在特定实体上播放实体动画。
    "playsound <sound: string> [player: target] [position: x y z] [volume: float] [pitch: float] [minimumVolume: float]": "this: playsound.default", // 在特定位置为指定玩家播放声音。
    "reload": "this: reload.default", // 重新加载行为包中的函数与脚本。
    "replaceitem block <position: x y z> slot.container <slotId: int> <itemName: Item> [amount: int] [data: int] [components: json]": "this: replaceitem.block.default", // 替换指定方块容器中的物品。
    "replaceitem block <position: x y z> slot.container <slotId: int> <oldItemHandling: ReplaceMode> <itemName: Item> [amount: int] [data: int] [components: json]": "this: replaceitem.block.withOldItemHandling", // 替换指定方块容器中的物品。
    "replaceitem entity <target: target> <slotType: EntityEquipmentSlot> <slotId: int> <itemName: Item> [amount: int] [data: int] [components: json]": "this: replaceitem.entity.default", // 替换指定实体特定槽位中的物品。
    "replaceitem entity <target: target> <slotType: EntityEquipmentSlot> <slotId: int> <oldItemHandling: ReplaceMode> <itemName: Item> [amount: int] [data: int] [components: json]": "this: replaceitem.entity.withOldItemHandling", // 替换指定实体特定槽位中的物品。
    "ride <riders: target> start_riding <ride: target> [teleportRules: TeleportRules] [howToFill: FillType]": "this: ride.startRiding", // 在骑手与坐骑间建立骑乘关系。
    "ride <riders: target> stop_riding": "this: ride.stopRiding", // 为骑手取消骑乘关系。
    "ride <riders: target> summon_ride <entityType: EntityType> [rideRules: RideRules] [spawnEvent: string] [nameTag: string]": "this: ride.summonRide", // 为骑手生成坐骑。
    "ride <rides: target> evict_riders": "this: ride.evictRiders", // 为坐骑取消骑乘关系。
    "ride <rides: target> summon_rider <entityType: EntityType> [spawnEvent: string] [nameTag: string]": "this: ride.summonRider", // 为坐骑生成骑手。
    "say <message: message>": "this: say.default", // 向所有玩家广播消息。
    "schedule on_area_loaded add <from: x y z> <to: x y z> <function: filepath>": "this: schedule.onAreaLoad.add.box", // 指定一个矩形区域，计划在此区域被加载时执行指定的函数。
    "schedule on_area_loaded add circle <center: x y z> <radius: int> <function: filepath>": "this: schedule.onAreaLoad.add.circle", // 指定一个圆形区域，计划在此区域被加载时执行指定的函数。
    "schedule on_area_loaded add tickingarea <name: string> <function: filepath>": "this: schedule.onAreaLoad.add.tickingArea", // 指定一个常加载区域，计划在此区域被加载时执行指定的函数。
    "scoreboard objectives add <objective: string> dummy [displayName: string]": "this: scoreboard.objectives.add", // 添加记分项。
    "scoreboard objectives list": "this: scoreboard.objectives.list", // 列出记分项。
    "scoreboard objectives remove <objective: string>": "this: scoreboard.objectives.remove", // 移除记分项。
    "scoreboard objectives setdisplay <list|sidebar> [objective: string] [ascending|descending]": "this: scoreboard.objectives.setdisplay.default", // 显示或隐藏记分项。
    "scoreboard objectives setdisplay belowname [objective: string]": "this: scoreboard.objectives.setdisplay.belowName", // 显示或隐藏记分项。
    "scoreboard players <add|remove|set> <player: target> <objective: string> <count: int>": "this: scoreboard.players.modify", // 修改记分板对象的分数。
    "scoreboard players list [playername: target]": "this: scoreboard.players.list", // 列出追踪的记分板对象。
    "scoreboard players operation <targetName: target> <targetObjective: string> <operation: operator> <selector: target> <objective: string>": "this: scoreboard.players.operation", // 对两个记分板对象的分数进行操作。
    "scoreboard players random <player: target> <objective: string> <min: int> <max: int>": "this: scoreboard.players.random", // 将记分板对象的分数修改为一个指定范围内的随机数。
    "scoreboard players reset <player: target> [objective: string]": "this: scoreboard.players.reset", // 重置记分板对象的分数。
    "scoreboard players test <player: target> <objective: string> <min: wildcard int> [max: wildcard int]": "this: scoreboard.players.test", // 测试记分板对象的分数是否在指定范围。
    "setblock <position: x y z> <tileName: Block> [blockStates: block states] [replace|destroy|keep]": "this: setblock.withBlockState", // 更改指定坐标位置的方块。
    "setblock <position: x y z> <tileName: Block> [tileData: int] [replace|destroy|keep]": "this: setblock.withDataValue", // 更改指定坐标位置的方块。
    "setmaxplayers <maxPlayers: int>": "this: setmaxplayers.default", // 设置世界的最大可加入玩家数。
    "setworldspawn [spawnPoint: x y z]": "this: setworldspawn.default", // 设置世界重生点。
    "spawnpoint [player: target] [spawnPos: x y z]": "this: spawnpoint.default", // 设置玩家重生点。
    "spreadplayers <x: value> <z: value> <spreadDistance: float> <maxRange: float> <victim: target>": "this: spreadplayers.default", // 将指定实体传送到区域内的随机位置。
    "stopsound <player: target> [sound: string]": "this: stopsound.default", // 为指定玩家停止播放声音。
    "structure delete <name: string>": "this: structure.delete", // 从存储中删除指定的结构。
    "structure load <name: string> <to: x y z> [rotation: Rotation] [mirror: Mirror] [animationMode: StructureAnimationMode] [animationSeconds: float] [includeEntities: Boolean] [includeBlocks: Boolean] [integrity: float] [seed: string]": "this: structure.load.animated", // 从存储中渐进加载指定的结构。
    "structure load <name: string> <to: x y z> [rotation: Rotation] [mirror: Mirror] [includeEntities: Boolean] [includeBlocks: Boolean] [integrity: float] [seed: string]": "this: structure.load.default", // 从存储中加载指定的结构。
    "structure save <name: string> <from: x y z> <to: x y z> [includeEntities: Boolean] [saveMode: StructureSaveMode] [includeBlocks: Boolean]": "this: structure.save.default", // 将结构以指定名称存储。
    "structure save <name: string> <from: x y z> <to: x y z> [saveMode: StructureSaveMode]": "this: structure.save.short", // 将结构以指定名称存储。
    "summon <entityType: EntityType> <nameTag: string> [spawnPos: x y z]": "this: summon.withNameTag", // 生成指定的实体并为其命名。
    "summon <entityType: EntityType> [spawnPos: x y z] [spawnEvent: string] [nameTag: string]": "this: summon.default", // 生成指定的实体。
    "tag <entity: target> <add|remove> <name: string>": "this: tag.modify", // 修改实体拥有的标签。
    "tag <entity: target> list": "this: tag.list", // 列出实体拥有的标签。
    "teleport <destination: target> [checkForBlocks: Boolean]": "this: teleport.self.toEntity", // 将自身传送至指定实体所在位置。
    "teleport <destination: x y z> [checkForBlocks: Boolean]": "this: teleport.self.toPos.default", // 将自身传送到指定坐标。
    "teleport <destination: x y z> [yRot: value] [xRot: value] [checkForBlocks: Boolean]": "this: teleport.self.toPos.withRotation", // 将自身传送到指定坐标，并面向指定方向。
    "teleport <destination: x y z> facing <lookAtEntity: target> [checkForBlocks: Boolean]": "this: teleport.self.toPos.facing.entity", // 将自身传送到指定坐标，并面向指定实体。
    "teleport <destination: x y z> facing <lookAtPosition: x y z> [checkForBlocks: Boolean]": "this: teleport.self.toPos.facing.position", // 将自身传送到指定坐标，并面向另一坐标。
    "teleport <victim: target> <destination: target> [checkForBlocks: Boolean]": "this: teleport.entity.toEntity", // 将指定实体传送至另一实体所在位置。
    "teleport <victim: target> <destination: x y z> [checkForBlocks: Boolean]": "this: teleport.entity.toPos.default", // 将指定实体传送到指定坐标。
    "teleport <victim: target> <destination: x y z> [yRot: value] [xRot: value] [checkForBlocks: Boolean]": "this: teleport.entity.toPos.withRotation", // 将指定实体传送到指定坐标，并面向指定方向。
    "teleport <victim: target> <destination: x y z> facing <lookAtEntity: target> [checkForBlocks: Boolean]": "this: teleport.entity.toPos.facing.entity", // 将指定实体传送到指定坐标，并面向另一实体。
    "teleport <victim: target> <destination: x y z> facing <lookAtPosition: x y z> [checkForBlocks: Boolean]": "this: teleport.entity.toPos.facing.position", // 将指定实体传送到指定坐标，并面向另一坐标。
    "tell <target: target> <message: message>": "this: tell.default", // 向指定玩家发送私聊消息。
    "tellraw <target: target> <raw json message: json>": "this: tellraw.default", // 向指定玩家发送JSON文本消息。
    "testfor <victim: target>": "this: testfor.default", // 测试指定的实体是否存在。
    "testforblock <position: x y z> <tileName: Block> [blockStates: block states]": "this: testforblock.withBlockState", // 测试指定坐标的方块是否满足条件。
    "testforblock <position: x y z> <tileName: Block> [dataValue: int]": "this: testforblock.withDataValue", // 测试指定坐标的方块是否满足条件。
    "testforblocks <begin: x y z> <end: x y z> <destination: x y z> [masked|all]": "this: testforblocks.default", // 测试指定区域的方块是否满足条件。
    "tickingarea add <from: x y z> <to: x y z> [name: string] [preload: Boolean]": "this: tickingarea.add.box", // 添加矩形常加载区域。
    "tickingarea add circle <center: x y z> <radius: int> [name: string] [preload: Boolean]": "this: tickingarea.add.circle", // 添加圆形常加载区域。
    "tickingarea list [all-dimensions: AllDimensions]": "this: tickingarea.list", // 列出常加载区域。
    "tickingarea preload <name: string> [preload: Boolean]": "this: tickingarea.preload.withName", // 将指定常加载区域标记为预先加载。
    "tickingarea preload <position: x y z> [preload: Boolean]": "this: tickingarea.preload.withPosition", // 将指定坐标所在的常加载区域标记为预先加载。
    "tickingarea remove <name: string>": "this: tickingarea.remove.withName", // 移除指定的常加载区域。
    "tickingarea remove <position: x y z>": "this: tickingarea.remove.withPosition", // 移除指定坐标所在的常加载区域。
    "tickingarea remove_all": "this: tickingarea.removeAll", // 移除全部常加载区域。
    "time add <amount: int>": "this: time.add", // 将当前时间加快指定时间值。
    "time query <time: TimeQuery>": "this: time.query", // 查询当前时间。
    "time set <amount: int>": "this: time.set.withInt", // 设置当前时间为指定时间点。
    "time set <time: TimeSpec>": "this: time.set.withEnum", // 设置当前时间为指定时间点。
    "title <player: target> <title|subtitle|actionbar> <titleText: message>": "this: title.show", // 向指定玩家展示指定标题。
    "title <player: target> clear": "this: title.clear", // 清除指定玩家屏幕上显示的标题。
    "title <player: target> reset": "this: title.reset", // 重置指定玩家的标题时间设置。
    "title <player: target> times <fadeIn: int> <stay: int> <fadeOut: int>": "this: title.times", // 设置指定玩家的标题时间设置。
    "titleraw <player: target> <titleLocation: TitleRawSet> <raw json titleText: json>": "this: titleraw.show", // 向指定玩家展示指定JSON文本标题。
    "titleraw <player: target> clear": "this: titleraw.clear", // 清除指定玩家屏幕上显示的JSON文本标题。
    "titleraw <player: target> reset": "this: titleraw.reset", // 重置指定玩家的JSON文本标题时间设置。
    "titleraw <player: target> times <fadeIn: int> <stay: int> <fadeOut: int>": "this: titleraw.times", // 设置指定玩家的JSON文本标题时间设置。
    "toggledownfall": "this: toggledownfall.default", // 切换当前天气是否降雨。
    "tp <destination: target> [checkForBlocks: Boolean]": "this: teleport.self.toEntity", // 将自身传送至指定实体所在位置。
    "tp <destination: x y z> [checkForBlocks: Boolean]": "this: teleport.self.toPos.default", // 将自身传送到指定坐标。
    "tp <destination: x y z> [yRot: value] [xRot: value] [checkForBlocks: Boolean]": "this: teleport.self.toPos.withRotation", // 将自身传送到指定坐标，并面向指定方向。
    "tp <destination: x y z> facing <lookAtEntity: target> [checkForBlocks: Boolean]": "this: teleport.self.toPos.facing.entity", // 将自身传送到指定坐标，并面向指定实体。
    "tp <destination: x y z> facing <lookAtPosition: x y z> [checkForBlocks: Boolean]": "this: teleport.self.toPos.facing.position", // 将自身传送到指定坐标，并面向另一坐标。
    "tp <victim: target> <destination: target> [checkForBlocks: Boolean]": "this: teleport.entity.toEntity", // 将指定实体传送至另一实体所在位置。
    "tp <victim: target> <destination: x y z> [checkForBlocks: Boolean]": "this: teleport.entity.toPos.default", // 将指定实体传送到指定坐标。
    "tp <victim: target> <destination: x y z> [yRot: value] [xRot: value] [checkForBlocks: Boolean]": "this: teleport.entity.toPos.withRotation", // 将指定实体传送到指定坐标，并面向指定方向。
    "tp <victim: target> <destination: x y z> facing <lookAtEntity: target> [checkForBlocks: Boolean]": "this: teleport.entity.toPos.facing.entity", // 将指定实体传送到指定坐标，并面向另一实体。
    "tp <victim: target> <destination: x y z> facing <lookAtPosition: x y z> [checkForBlocks: Boolean]": "this: teleport.entity.toPos.facing.position", // 将指定实体传送到指定坐标，并面向另一坐标。
    "w <target: target> <message: message>": "this: tell.default", // 向指定玩家发送私聊消息。
    "weather <clear|rain|thunder> [duration: int]": "this: weather.update", // 设置当前天气。
    "weather query": "this: weather.query", // 查询当前天气。
    "wsserver <serverUri: text>": "this: wsserver.default", // 连接WebSocket服务器。
    "xp <amount: int> [player: target]": "this: xp.withInt", // 修改玩家的经验值。
    "xp <amount: int>L [player: target]": "this: xp.withLevel", // 修改玩家的经验值。
    "ability <player: target> <ability: Ability> <value: Boolean>": "this: ability.set", // 设置玩家拥有的能力。
    "ability <player: target> [ability: Ability]": "this: ability.get", // 查询玩家拥有的能力。
    "immutableworld [value: Boolean]": "this: immutableworld.default", // 查询或设置世界是否不可更改。
    "wb": "this: worldbuilder.default", // 切换世界建造者能力开关。
    "worldbuilder": "this: worldbuilder.default", // 切换世界建造者能力开关。
    "gametest clearall": "this: gametest.clearAll", // 清除所有 GameTest 测试。
    "gametest create <testName: string> [width: int] [height: int] [depth: int]": "this: gametest.create", // 为 GameTest 测试分配区域。
    "gametest pos": "this: gametest.pos", // 查询最近的 GameTest 测试的位置。
    "gametest run <testName: GameTestName> <stopOnFailure: Boolean> <repeatCount: int> [rotationSteps: int]": "this: gametest.run.default", // 运行指定的 GameTest 测试。
    "gametest run <testName: GameTestName> [rotationSteps: int]": "this: gametest.run.short", // 运行指定的 GameTest 测试。
    "gametest runset [tag: GameTestTag] [rotationSteps: int]": "this: gametest.runset", // 运行指定的 GameTest 测试集合。
    "gametest runthese": "this: gametest.runthese", // 运行附近所有的 GameTest 测试。
    "gametest runthis": "this: gametest.runthis", // 运行最近的 GameTest 测试。
    "script debugger close": "this: script.debugger.close", // 关闭脚本调试器。
    "script debugger connect <host: string> <port: int>": "this: script.debugger.connect", // script debugger connect <host: string> <port: int>
    "script debugger listen <port: int>": "this: script.debugger.listen", // 以被动模式打开脚本调试器。
    "volumearea add <identifier: string> <from: x y z> <to: x y z> [name: string]": "this: volumearea.add", // 添加矩形功能域。
    "volumearea list [all-dimensions: VolumeAreaAllDimensions]": "this: volumearea.list", // 列出所有功能域。
    "volumearea remove <name: string>": "this: volumearea.remove.withName", // 移除指定功能域。
    "volumearea remove <position: x y z>": "this: volumearea.remove.withPosition", // 移除指定坐标所在的功能域。
    "volumearea remove_all": "this: volumearea.removeAll", // 移除所有功能域。
    "loot replace entity <entity: target> <slotType: EntityEquipmentSlot> <slotId: int> <count: int> kill <entity: target> [<tool>|mainhand|offhand: string]": "this: loot.replace.entity.withCount.from.kill", // 将指定实体的部分槽位替换为特定实体被击杀所能获得的战利品。
    "loot replace entity <entity: target> <slotType: EntityEquipmentSlot> <slotId: int> <count: int> loot <loot_table: string> [<tool>|mainhand|offhand: string]": "this: loot.replace.entity.withCount.from.loot", // 将指定实体的部分槽位替换为通过特定战利品表所能获得的战利品。
    "loot replace entity <entity: target> <slotType: EntityEquipmentSlot> <slotId: int> kill <entity: target> [<tool>|mainhand|offhand: string]": "this: loot.replace.entity.default.from.kill", // 将指定实体的部分槽位替换为特定实体被击杀所能获得的战利品。
    "loot replace entity <entity: target> <slotType: EntityEquipmentSlot> <slotId: int> loot <loot_table: string> [<tool>|mainhand|offhand: string]": "this: loot.replace.entity.default.from.loot", // 将指定实体的部分槽位替换为通过特定战利品表所能获得的战利品。
    "gametest run <testName: string> <stopOnFailure: Boolean> <repeatCount: int> [rotationSteps: int]": "this: gametest.run.default", // 运行指定的 GameTest 测试。
    "gametest run <testName: string> [rotationSteps: int]": "this: gametest.run.short", // 运行指定的 GameTest 测试。
    "gametest runset [tag: string] [rotationSteps: int]": "this: gametest.runset", // 运行指定的 GameTest 测试集合。
    "script debugger connect [host: string] [port: int]": "this: script.debugger.connect", // 以主动模式打开脚本调试器。
    "script profiler start": "this: script.profiler.start", // 启动脚本性能分析。
    "script profiler stop": "this: script.profiler.stop", // 停止脚本性能分析。
    "execute <subcommand: Option_If_Unless> block <position: x y z> <block: Block> <blockStates: block states> [chainedCommand: ExecuteChainedOption_0]": "this: execute.conditional.block.withBlockState", // 当指定坐标的方块满足条件时，执行后续子命令。
    "execute <subcommand: Option_If_Unless> block <position: x y z> <block: Block> <data: int> [chainedCommand: ExecuteChainedOption_0]": "this: execute.conditional.block.withDataValue", // 当指定坐标的方块满足条件时，执行后续子命令。
    "execute <subcommand: Option_If_Unless> block <position: x y z> <block: Block> [chainedCommand: ExecuteChainedOption_0]": "this: execute.conditional.block.default", // 当指定坐标的方块满足条件时，执行后续子命令。
    "execute <subcommand: Option_If_Unless> blocks <begin: x y z> <end: x y z> <destination: x y z> <scan mode: BlocksScanMode> [chainedCommand: ExecuteChainedOption_0]": "this: execute.conditional.blocks", // 当指定区域的方块满足条件时，执行后续子命令。
    "execute <subcommand: Option_If_Unless> entity <target: target> [chainedCommand: ExecuteChainedOption_0]": "this: execute.conditional.entity", // 当实体满足条件时，执行后续子命令。
    "execute <subcommand: Option_If_Unless> score <target: target> <objective: string> <operation: compare operator> <source: target> <objective: string> [chainedCommand: ExecuteChainedOption_0]": "this: execute.conditional.score.compare", // 当记分项分数满足条件时，执行后续子命令。
    "execute <subcommand: Option_If_Unless> score <target: target> <objective: string> matches <range: integer range> [chainedCommand: ExecuteChainedOption_0]": "this: execute.conditional.score.matches", // 当记分项分数满足条件时，执行后续子命令。
    "execute as <origin: target> <chainedCommand: ExecuteChainedOption_0>": "this: execute.as", // 改变执行者，并执行后续子命令。
    "execute at <origin: target> <chainedCommand: ExecuteChainedOption_0>": "this: execute.at", // 改变执行位置，并执行后续子命令。
    "execute positioned <position: x y z> <chainedCommand: ExecuteChainedOption_0>": "this: execute.positioned.default", // 改变执行坐标为指定坐标，并执行后续子命令。
    "execute positioned as <origin: target> <chainedCommand: ExecuteChainedOption_0>": "this: execute.positioned.as", // 改变执行坐标为指定实体的位置，并执行后续子命令。
    "execute run <command: command>": "this: execute.run", // 执行命令。
    "locate <feature: Structure> [useNewChunksOnly: Boolean]": "this: locate.structure", // 寻找并确定最近的特定结构的坐标。
    "locate biome <biome: Biome>": "this: locate.biome", // 寻找并确定最近的特定生物群系的坐标。
    "locate structure <structure: Structure> [useNewChunksOnly: Boolean]": "this: locate.structure", // 寻找并确定最近的特定结构的坐标。
    "structure load <name: string> <to: x y z> [rotation: Rotation] [mirror: Mirror] [animationMode: StructureAnimationMode] [animationSeconds: float] [includeEntities: Boolean] [includeBlocks: Boolean] [waterlogged: Boolean] [integrity: float] [seed: string]": "this: structure.load.animated", // 从存储中渐进加载指定的结构。
    "structure load <name: string> <to: x y z> [rotation: Rotation] [mirror: Mirror] [includeEntities: Boolean] [includeBlocks: Boolean] [waterlogged: Boolean] [integrity: float] [seed: string]": "this: structure.load.default", // 从存储中加载指定的结构。
    "script watchdog exportstats": "this: script.watchdog.exportStats", // 导出看门狗计时器统计数据。
    "loot replace block <position: x y z> slot.container <slotId: int> <count: int> kill <entity: target> [<tool>|mainhand|offhand: string]": "this: loot.replace.block.withCount.from.kill", // 将指定方块的部分槽位替换为特定实体被击杀所能获得的战利品。
    "loot replace block <position: x y z> slot.container <slotId: int> <count: int> loot <loot_table: string> [<tool>|mainhand|offhand: string]": "this: loot.replace.block.withCount.from.loot", // 将指定方块的部分槽位替换为通过特定战利品表所能获得的战利品。
    "loot replace block <position: x y z> slot.container <slotId: int> kill <entity: target> [<tool>|mainhand|offhand: string]": "this: loot.replace.block.default.from.kill", // 将指定方块的部分槽位替换为特定实体被击杀所能获得的战利品。
    "loot replace block <position: x y z> slot.container <slotId: int> loot <loot_table: string> [<tool>|mainhand|offhand: string]": "this: loot.replace.block.default.from.loot", // 将指定方块的部分槽位替换为通过特定战利品表所能获得的战利品。
    "execute rotated <yaw: value> <pitch: value> <chainedCommand: ExecuteChainedOption_0>": "this: execute.rotated.default", // 改变执行朝向为指定朝向，并执行后续子命令。
    "execute rotated as <origin: target> <chainedCommand: ExecuteChainedOption_0>": "this: execute.rotated.as", // 改变执行朝向为指定实体的朝向，并执行后续子命令。
    "summon <entityType: EntityType> [spawnPos: x y z] [yRot: value] [xRot: value] [spawnEvent: string] [nameTag: string]": "this: summon.default", // 生成指定的实体。
    "execute align <axes: string> <chainedCommand: ExecuteChainedOption_0>": "this: execute.align", // 将执行坐标的指定分量向下取整，并执行后续子命令。
    "execute facing <position: x y z> <chainedCommand: ExecuteChainedOption_0>": "this: execute.facing.default", // 改变执行朝向为面向指定坐标，并执行后续子命令。
    "execute facing entity <origin: target> <eyes|feet> <chainedCommand: ExecuteChainedOption_0>": "this: execute.facing.entity", // 改变执行朝向为面向指定实体，并执行后续子命令。
    "execute anchored <eyes|feet> <chainedCommand: ExecuteChainedOption_0>": "this: execute.anchored", // 改变执行定位基准点，并执行后续子命令。
    "execute in <dimension: Dimension> <chainedCommand: ExecuteChainedOption_0>": "this: execute.in", // 改变执行维度与执行坐标系，并执行后续子命令。
    "scriptevent <messageId: string> <message: message>": "this: scriptevent.default", // 向 Script API 模块广播消息事件。
    "summon <entityType: EntityType> [spawnPos: x y z] facing <lookAtEntity: target> [spawnEvent: string] [nameTag: string]": "this: summon.facing.entity", // 生成指定的实体并使其面向另一实体。
    "summon <entityType: EntityType> [spawnPos: x y z] facing <lookAtPosition: x y z> [spawnEvent: string] [nameTag: string]": "this: summon.facing.position", // 生成指定的实体并使其面向指定位置。
    "clone <begin: x y z> <end: x y z> <destination: x y z> filtered <cloneMode: CloneMode> <tileName: Block> [blockStates: block states]": "this: clone.filtered.withBlockState", // 在区域间复制方块。
    "fill <from: x y z> <to: x y z> <tileName: Block> <blockStates: block states> [oldBlockHandling: FillMode]": "this: fill.default.withBlockState", // 用指定方块填充区域。
    "fill <from: x y z> <to: x y z> <tileName: Block> [oldBlockHandling: FillMode]": "this: fill.default.default", // 用指定方块填充区域。
    "fill <from: x y z> <to: x y z> <tileName: Block> replace [replaceTileName: Block] [replaceBlockStates: block states]": "this: fill.replace.default", // 用指定方块替换区域中的特定方块。
    "inputpermission query <targets: target> <permission: permission> [state: state]": "this: inputpermission.query", // 查询选中玩家的会话的操作输入权限。
    "inputpermission set <targets: target> <permission: permission> <state: state>": "this: inputpermission.set", // 设置选中玩家的会话的操作输入权限。
    "setblock <position: x y z> <tileName: Block> <blockStates: block states> [replace|destroy|keep]": "this: setblock.withBlockState", // 更改指定坐标位置的方块。
    "setblock <position: x y z> <tileName: Block> [replace|destroy|keep]": "this: setblock.default", // 更改指定坐标位置的方块。
    "teleport <destination: target>": "this: teleport.self.toEntity", // 将自身传送至指定实体所在位置。
    "tp <destination: target>": "this: teleport.self.toEntity", // 将自身传送至指定实体所在位置。
    "gametest runsetuntilfail [tag: string] [rotationSteps: int]": "this: gametest.runsetuntilfail", // 运行指定的 GameTest 测试集合，若有一个测试未通过则立即停止。
    "gametest stopall": "this: gametest.stopall", // 停止全部 GameTest 测试。
    "camera <players: target> clear": "this: camera.clear", // 重置玩家的摄像机。
    "camera <players: target> fade": "this: camera.fade.default", // 使玩家视角逐渐变为黑色，维持一段时间后逐渐恢复。
    "camera <players: target> fade color <red: float> <green: float> <blue: float>": "this: camera.fade.color", // 使玩家视角逐渐变为指定的颜色，维持一段时间后逐渐恢复。
    "camera <players: target> fade time <fadeInSeconds: float> <holdSeconds: float> <fadeOutSeconds: float>": "this: camera.fade.time", // 使玩家视角在指定的时间内逐渐变为黑色，维持指定时间后逐渐恢复。
    "camera <players: target> fade time <fadeInSeconds: float> <holdSeconds: float> <fadeOutSeconds: float> color <red: float> <green: float> <blue: float>": "this: camera.fade.time.color", // 使玩家视角按在指定的时间内逐渐变为指定的颜色，维持指定时间后逐渐恢复。
    "camera <players: target> set <preset: string> [default: default]": "this: camera.set.default", // 将玩家的摄像机设置为指定预设。
    "camera <players: target> set <preset: string> ease <easeTime: float> <easeType: Easing> [default: default]": "this: camera.set.ease.default", // 将玩家的摄像机平滑变换为指定预设。
    "camera <players: target> set <preset: string> ease <easeTime: float> <easeType: Easing> pos <position: x y z>": "this: camera.set.ease.pos", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的位置。
    "camera <players: target> set <preset: string> ease <easeTime: float> <easeType: Easing> pos <position: x y z> rot <xRot: value> <yRot: value>": "this: camera.set.ease.pos.rot", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的位置与旋转角度。
    "camera <players: target> set <preset: string> ease <easeTime: float> <easeType: Easing> rot <xRot: value> <yRot: value>": "this: camera.set.ease.rot", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的旋转角度。
    "camera <players: target> set <preset: string> pos <position: x y z>": "this: camera.set.pos", // 将玩家的摄像机设置为指定预设，并覆盖该预设的位置。
    "camera <players: target> set <preset: string> pos <position: x y z> rot <xRot: value> <yRot: value>": "this: camera.set.pos.rot", // 将玩家的摄像机设置为指定预设，并覆盖该预设的位置与旋转角度。
    "camera <players: target> set <preset: string> rot <xRot: value> <yRot: value>": "this: camera.set.rot", // 将玩家的摄像机设置为指定预设，并覆盖该预设的旋转角度。
    "scoreboard players <set|add|remove> <player: target> <objective: string> <count: int>": "this: scoreboard.players.modify", // 修改记分板对象的分数。
    "camera <players: target> fade color <red: int> <green: int> <blue: int>": "this: camera.fade.color", // 使玩家视角逐渐变为指定的颜色，维持一段时间后逐渐恢复。
    "camera <players: target> fade time <fadeInSeconds: float> <holdSeconds: float> <fadeOutSeconds: float> color <red: int> <green: int> <blue: int>": "this: camera.fade.time.color", // 使玩家视角按在指定的时间内逐渐变为指定的颜色，维持指定时间后逐渐恢复。
    "recipe <victim: target> give <recipe: string>": "this: recipe.give", // 向玩家赋予指定的配方。
    "recipe <victim: target> take <recipe: string>": "this: recipe.take", // 从玩家收回指定的配方。
    "camera <players: target> set <preset: string> ease <easeTime: float> <easeType: Easing> facing <lookAtEntity: target>": "this: camera.set.ease.facing.entity", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的旋转角度，使其面向指定实体。
    "camera <players: target> set <preset: string> ease <easeTime: float> <easeType: Easing> facing <lookAtPosition: x y z>": "this: camera.set.ease.facing.position", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的旋转角度，使其面向指定坐标。
    "camera <players: target> set <preset: string> ease <easeTime: float> <easeType: Easing> pos <position: x y z> facing <lookAtEntity: target>": "this: camera.set.ease.pos.facing.entity", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的位置与旋转角度，使其面向指定实体。
    "camera <players: target> set <preset: string> ease <easeTime: float> <easeType: Easing> pos <position: x y z> facing <lookAtPosition: x y z>": "this: camera.set.ease.pos.facing.position", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的位置与旋转角度，使其面向指定坐标。
    "camera <players: target> set <preset: string> facing <lookAtEntity: target>": "this: camera.set.facing.entity", // 将玩家的摄像机设置为指定预设，并覆盖该预设的旋转角度，使其面向指定实体。
    "camera <players: target> set <preset: string> facing <lookAtPosition: x y z>": "this: camera.set.facing.position", // 将玩家的摄像机设置为指定预设，并覆盖该预设的旋转角度，使其面向指定坐标。
    "camera <players: target> set <preset: string> pos <position: x y z> facing <lookAtEntity: target>": "this: camera.set.pos.facing.entity", // 将玩家的摄像机设置为指定预设，并覆盖该预设的位置与旋转角度，使其面向指定实体。
    "camera <players: target> set <preset: string> pos <position: x y z> facing <lookAtPosition: x y z>": "this: camera.set.pos.facing.position", // 将玩家的摄像机设置为指定预设，并覆盖该预设的位置与旋转角度，使其面向指定坐标。
    "recipe give <victim: target> <recipe: string>": "this: recipe.give", // 向玩家赋予指定的配方。
    "recipe take <victim: target> <recipe: string>": "this: recipe.take", // 从玩家收回指定的配方。
    "recipe give <player: target> <recipe: string>": "this: recipe.give", // 向玩家赋予指定的配方。
    "recipe take <player: target> <recipe: string>": "this: recipe.take", // 从玩家收回指定的配方。
    "hud <target: target> <visible: HudVisibility> [hud_element: HudElement]": "this: hud.default", // 配置选中玩家的HUD界面元素的可见性。
    "camera <players: target> set <preset: string> rot <xRot: value> <yRot: value> view_offset <xViewOffset: float> <yViewOffset: float>": "this: camera.set.rot.viewOffset", // 将玩家的摄像机设置为指定预设，并覆盖该预设的旋转角度与视点偏移。
    "camera <players: target> set <preset: string> view_offset <xViewOffset: float> <yViewOffset: float>": "this: camera.set.viewOffset", // 将玩家的摄像机设置为指定预设，并覆盖该预设的视点偏移。
    "spreadplayers <x: value> <z: value> <spreadDistance: float> <maxRange: float> <victim: target> [maxHeight: value]": "this: spreadplayers.default", // 将指定实体传送到区域内的随机位置。
    "locate structure <structure: string> [useNewChunksOnly: Boolean]": "this: locate.structure", // 寻找并确定最近的特定结构的坐标。
    "camera <players: target> remove_target": "this: camera.removeTarget", // 清除玩家摄像机的跟踪目标。
    "camera <players: target> target_entity <entity: target>": "this: camera.targetEntity.default", // 设置玩家摄像机的跟踪目标为指定实体。
    "camera <players: target> target_entity <entity: target> target_center_offset <xTargetCenterOffset: float> <yTargetCenterOffset: float> <zTargetCenterOffset: float>": "this: camera.targetEntity.withOffset", // 设置玩家摄像机的跟踪目标为指定实体偏移后的位置。
    "reload [all: reload_all]": "this: reload.default", // 重新加载行为包中的函数与脚本。
    "effect <player: target> <effect: Effect> infinite [amplifier: int] [hideParticles: Boolean]": "this: effect.add.infinite", // 为实体添加持续时间无限的状态效果。
    "effect <player: target> clear [effect: Effect]": "this: effect.clear", // 清除实体的状态效果。
    "schedule clear <function: filepath>": "this: schedule.clear.all", // 从所有计划中移除指定的函数。
    "schedule on_area_loaded clear function <function: filepath>": "this: schedule.onAreaLoad.clear.function", // 从所有区域加载时触发的计划中移除指定的函数。
    "schedule on_area_loaded clear tickingarea <name: string> [function: filepath]": "this: schedule.onAreaLoad.clear.tickingArea", // 指定一个常加载区域，从计划中移除在此区域被加载时执行的所有或指定函数。
    "camera <players: target> set <preset: string> entity_offset <xEntityOffset: float> <yEntityOffset: float> <zEntityOffset: float>": "this: camera.set.entityOffset", // 将玩家的摄像机设置为指定预设，并覆盖该预设的局部坐标偏移。
    "camera <players: target> set <preset: string> rot <xRot: value> <yRot: value> entity_offset <xEntityOffset: float> <yEntityOffset: float> <zEntityOffset: float>": "this: camera.set.rot.entityOffset", // 将玩家的摄像机设置为指定预设，并覆盖该预设的旋转角度与局部坐标偏移。
    "camera <players: target> set <preset: string> rot <xRot: value> <yRot: value> view_offset <xViewOffset: float> <yViewOffset: float> entity_offset <xEntityOffset: float> <yEntityOffset: float> <zEntityOffset: float>": "this: camera.set.rot.viewOffset.entityOffset", // 将玩家的摄像机设置为指定预设，并覆盖该预设的旋转角度、视点偏移与局部坐标偏移。
    "camera <players: target> set <preset: string> view_offset <xViewOffset: float> <yViewOffset: float> entity_offset <xEntityOffset: float> <yEntityOffset: float> <zEntityOffset: float>": "this: camera.set.viewOffset.entityOffset", // 将玩家的摄像机设置为指定预设，并覆盖该预设的视点偏移与局部坐标偏移。
    "schedule delay add <function: filepath> <time: int> [replace|append]": "this: schedule.delay.add", // 计划在指定的时间间隔后执行指定的函数。
    "schedule delay add <function: filepath> <time: int>D [replace|append]": "this: schedule.delay.add", // 计划在指定的时间间隔后执行指定的函数。
    "schedule delay add <function: filepath> <time: int>S [replace|append]": "this: schedule.delay.add", // 计划在指定的时间间隔后执行指定的函数。
    "schedule delay add <function: filepath> <time: int>T [replace|append]": "this: schedule.delay.add", // 计划在指定的时间间隔后执行指定的函数。
    "schedule delay clear <function: filepath>": "this: schedule.delay.clear", // 取消指定的函数在一定时间间隔后执行的计划。
    "loot give <players: target> mine <TargetBlockPosition: x y z> [<tool>|mainhand|offhand: string]": "this: loot.give.from.mine", // 给予玩家通过特定战利品表所能获得的战利品。
    "loot insert <position: x y z> mine <TargetBlockPosition: x y z> [<tool>|mainhand|offhand: string]": "this: loot.insert.from.mine", // 向指定容器方块中加入通过挖掘特定方块所能获得的战利品。
    "loot replace block <position: x y z> slot.container <slotId: int> <count: int> mine <TargetBlockPosition: x y z> [<tool>|mainhand|offhand: string]": "this: loot.replace.block.withCount.from.mine", // 将指定方块的部分槽位替换为通过挖掘特定方块所能获得的战利品。
    "loot replace block <position: x y z> slot.container <slotId: int> mine <TargetBlockPosition: x y z> [<tool>|mainhand|offhand: string]": "this: loot.replace.block.default.from.mine", // 将指定方块的部分槽位替换为通过挖掘特定方块所能获得的战利品。
    "loot replace entity <entity: target> <slotType: EntityEquipmentSlot> <slotId: int> <count: int> mine <TargetBlockPosition: x y z> [<tool>|mainhand|offhand: string]": "this: loot.replace.entity.withCount.from.mine", // 将指定实体的部分槽位替换为通过挖掘特定方块所能获得的战利品。
    "loot replace entity <entity: target> <slotType: EntityEquipmentSlot> <slotId: int> mine <TargetBlockPosition: x y z> [<tool>|mainhand|offhand: string]": "this: loot.replace.entity.default.from.mine", // 将指定实体的部分槽位替换为通过挖掘特定方块所能获得的战利品。
    "loot spawn <position: x y z> mine <TargetBlockPosition: x y z> [<tool>|mainhand|offhand: string]": "this: loot.spawn.from.mine", // 在指定位置掉落通过挖掘特定方块所能获得的战利品。
    "set_movement_authority <client|server>": "this: set_movement_authority.default", // 设置服务器是否对玩家客户端的移动进行校验。
    "aimassist <players: target> clear": "this: aimassist.clear", // 禁用玩家的辅助瞄准。
    "aimassist <players: target> set [x angle: float] [y angle: float] [max distance: float] [target mode: AimAssistTargetMode] [preset id: string]": "this: aimassist.set", // 启用玩家的辅助瞄准，并使用指定的预设。
    "place jigsaw <pool: filepath> <jigsawTarget: string> <maxDepth: int> [pos: x y z] [keepJigsaws: Boolean]": "this: place.jigsaw.default", // 以指定的设置放置并转换拼图方块。
    "place structure <structure: string> [pos: x y z] [ignoreStartHeight: Boolean] [keepJigsaws: Boolean]": "this: place.structure.default", // 放置拼图结构并转换其中的拼图方块。
    "place feature <feature: features> [position: x y z]": "this: place.feature.default", // 在指定的位置放置地物。
    "place featurerule <featurerule: featureRules> [position: x y z]": "this: place.featurerule.default", // 在指定的位置放置地物规则。
    "place jigsaw <pool: filepath> <jigsawTarget: string> <maxDepth: int> [pos: x y z] [keepJigsaws: Boolean] [includeEntities: Boolean]": "this: place.jigsaw.default", // 以指定的设置放置并转换拼图方块。
    "place structure <structure: string> [pos: x y z] [ignoreStartHeight: Boolean] [keepJigsaws: Boolean] [includeEntities: Boolean]": "this: place.structure.default", // 放置拼图结构并转换其中的拼图方块。
    "script diagnostics startcapture": "this: script.diagnostics.capture.start", // 启动脚本诊断数据抓取。
    "script diagnostics stopcapture": "this: script.diagnostics.capture.stop", // 结束脚本诊断数据抓取。
    "camera <players: target> set <preset: string> ease <easeTime: float> <easeType: Easing> entity_offset <xEntityOffset: float> <yEntityOffset: float> <zEntityOffset: float>": "this: camera.set.ease.entityOffset", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的局部坐标偏移。
    "camera <players: target> set <preset: string> ease <easeTime: float> <easeType: Easing> rot <xRot: value> <yRot: value> entity_offset <xEntityOffset: float> <yEntityOffset: float> <zEntityOffset: float>": "this: camera.set.ease.rot.entityOffset", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的旋转角度与局部坐标偏移。
    "camera <players: target> set <preset: string> ease <easeTime: float> <easeType: Easing> rot <xRot: value> <yRot: value> view_offset <xViewOffset: float> <yViewOffset: float>": "this: camera.set.ease.rot.viewOffset", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的旋转角度与视点偏移。
    "camera <players: target> set <preset: string> ease <easeTime: float> <easeType: Easing> rot <xRot: value> <yRot: value> view_offset <xViewOffset: float> <yViewOffset: float> entity_offset <xEntityOffset: float> <yEntityOffset: float> <zEntityOffset: float>": "this: camera.set.ease.rot.viewOffset.entityOffset", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的旋转角度、视点偏移与局部坐标偏移。
    "camera <players: target> set <preset: string> ease <easeTime: float> <easeType: Easing> view_offset <xViewOffset: float> <yViewOffset: float>": "this: camera.set.ease.viewOffset", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的视点偏移。
    "camera <players: target> set <preset: string> ease <easeTime: float> <easeType: Easing> view_offset <xViewOffset: float> <yViewOffset: float> entity_offset <xEntityOffset: float> <yEntityOffset: float> <zEntityOffset: float>": "this: camera.set.ease.viewOffset.entityOffset", // 将玩家的摄像机平滑变换为指定预设，并覆盖该预设的视点偏移与局部坐标偏移。
    "controlscheme <players: target> clear": "this: controlscheme.clear", // 恢复玩家的操纵方案。
    "controlscheme <players: target> set <control scheme: controlscheme>": "this: controlscheme.set", // 设置玩家的操纵方案。
    "place jigsaw <pool: filepath> <jigsawTarget: string> <maxDepth: int> [pos: x y z] [keepJigsaws: Boolean] [includeEntities: Boolean] [liquidSettings: LiquidSettings]": "this: place.jigsaw.default", // 以指定的设置放置并转换拼图方块。
    "place structure <structure: string> [pos: x y z] [ignoreStartHeight: Boolean] [keepJigsaws: Boolean] [includeEntities: Boolean] [liquidSettings: LiquidSettings]": "this: place.structure.default", // 放置拼图结构并转换其中的拼图方块。
    "camera <players: target> fov_clear": "this: camera.fov.clear", // 重置玩家摄像机的视场角。
    "camera <players: target> fov_set <fov_value: float>": "this: camera.fov.set", // 设置玩家摄像机的视场角。
    "camera <players: target> fov_clear [fovEaseTime: float] [fovEaseType: Easing]": "this: camera.fov.clear", // 重置玩家摄像机的视场角。
    "camera <players: target> fov_set <fov_value: float> [fovEaseTime: float] [fovEaseType: Easing]": "this: camera.fov.set", // 设置玩家摄像机的视场角。
    "camera <players: target> attach_to_entity <entity: target>": "this: camera.attachToEntity", // 绑定玩家摄像机到指定实体。
    "camera <players: target> detach_from_entity": "this: camera.detachFromEntity", // 解绑玩家摄像机。
}